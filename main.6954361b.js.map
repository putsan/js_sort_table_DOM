{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tHead","tBodyRows","tBodies","rows","takeDigit","string","replace","addEventListener","event","IsInAscendingOrder","target","orderASC","sort","a","b","rowA","rowB","columnIndex","cellIndex","dataA","cells","textContent","dataB","search","localeCompare","forEach","row","append"],"mappings":";AAAA,aAUA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EARA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAQH,EAAME,cAAc,SAC5BE,EAAiBJ,EAAAA,EAAMK,QAAQ,GAAGC,MAExC,SAASC,EAAUC,GACVA,OAAAA,EAAOC,QAAQ,QAAS,IAGjCN,EAAMO,iBAAiB,QAAS,SAAAC,GACxBC,IAAAA,IAAuBD,EAAME,OAAOC,SAE1CV,EAAUW,KAAK,SAACC,EAAGC,GACXC,IAAAA,EAAON,EAAqBK,EAAID,EAChCG,EAAOP,EAAqBI,EAAIC,EAEhCG,EAAcT,EAAME,OAAOQ,UAE3BC,EAAQJ,EAAKK,MAAMH,GAAaI,YAChCC,EAAQN,EAAKI,MAAMH,GAAaI,YAE/BF,OAAAA,EAAMI,OAAO,UAAY,EAC5BnB,EAAUe,GAASf,EAAUkB,GAC7BH,EAAMK,cAAcF,KAG1BrB,EAAUwB,QAAQ,SAAAC,GAAO7B,OAAAA,EAAMK,QAAQ,GAAGyB,OAAOD,KACjDlB,EAAME,OAAOC,UAAYF","file":"main.6954361b.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst tHead = table.querySelector('thead');\nconst tBodyRows = [ ...table.tBodies[0].rows ];\n\nfunction takeDigit(string) {\n  return string.replace(/,|\\$/g, '');\n}\n\ntHead.addEventListener('click', event => {\n  const IsInAscendingOrder = !!event.target.orderASC;\n\n  tBodyRows.sort((a, b) => {\n    const rowA = IsInAscendingOrder ? b : a;\n    const rowB = IsInAscendingOrder ? a : b;\n\n    const columnIndex = event.target.cellIndex;\n\n    const dataA = rowA.cells[columnIndex].textContent;\n    const dataB = rowB.cells[columnIndex].textContent;\n\n    return dataA.search(/[0-9]/) >= 0\n      ? takeDigit(dataA) - takeDigit(dataB)\n      : dataA.localeCompare(dataB);\n  });\n\n  tBodyRows.forEach(row => table.tBodies[0].append(row));\n  event.target.orderASC = !IsInAscendingOrder;\n});\n"]}